

Step 1: Install Mongoose
Step 2: Create a Connection
Step 3: Define a Schema
Step 4: Use the Model




To connect MongoDB with Node.js and define a schema and model, you'll typically use a library like Mongoose, which is a MongoDB object modeling tool designed to work in an asynchronous environment. Here's a step-by-step guide:

Step 1: Install Mongoose
npm install mongoose

Step 2: Create a Connection
const mongoose = require('mongoose');

// Replace 'your_database_url' with your actual MongoDB connection string
const mongoDBURL = 'mongodb://localhost:27017/your_database_name';

mongoose.connect(mongoDBURL, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((err) => {
    console.error('Error connecting to MongoDB:', err);
  });


Step 3: Define a Schema
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const userSchema = new Schema({
  name: String,
  email: { type: String, unique: true },
  age: Number
});

const User = mongoose.model('User', userSchema);

module.exports = User;
Step 4: Use the Model
javascript
Copy code
const User = require('./path-to-your-user-schema');

// Create a new user
const newUser = new User({
  name: 'John Doe',
  email: 'john@example.com',
  age: 25
});

// Save the user to the database
newUser.save()
  .then((result) => {
    console.log('User saved:', result);
  })
  .catch((err) => {
    console.error('Error saving user:', err);
  });


This is a basic setup. You can modify the schema according to your needs, add validation, middleware, etc. Additionally, you can use async/await syntax for a more modern and readable code style.

Remember to replace 'mongodb://localhost:27017/your_database_name' with your actual MongoDB connection string and database name.